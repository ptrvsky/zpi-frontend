{"version":3,"sources":["components/ScrollToTop/ScrollToTop.js","components/Navbar/Navbar.js","components/Footer/Footer.js","components/Index/Index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ScrollToTop","prevProps","this","props","location","pathname","window","scrollTo","React","Component","withRouter","Desktop","children","useMediaQuery","minWidth","Mobile","maxWidth","NavigationBar","state","user","status","className","Navbar","variant","expand","to","Brand","role","aria-label","NavDropdown","alignRight","title","Divider","onClick","handleLogout","Toggle","Collapse","Footer","Index","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ddf080a.chunk.js","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollToTop extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.location.pathname !== prevProps.location.pathname\n    ) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Navbar, NavDropdown } from 'react-bootstrap';\nimport { User, LogIn, } from 'react-feather';\nimport { useMediaQuery } from 'react-responsive'\nimport './Navbar.scss';\n\nconst Desktop = ({ children }) => {\n  const isDesktop = useMediaQuery({ minWidth: 992 })\n  return isDesktop ? children : null\n}\n\nconst Mobile = ({ children }) => {\n  const isMobile = useMediaQuery({ maxWidth: 991 })\n  return isMobile ? children : null\n}\n\nclass NavigationBar extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {\n        status: 'NOT_LOGGED',\n      },\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Navbar\">\n        <div className=\"navbar-container\">\n          <Navbar variant=\"light\" expand=\"lg\">\n            <Link to=\"/\">\n              <Navbar.Brand>\n                <div className=\"logo-text d-inline-block align-top\"><span className=\"dark-gray\"><span role=\"img\" aria-label=\"logo\">üçï</span> Pizzeria</span><span className=\"red\"> Online</span></div>\n              </Navbar.Brand>\n            </Link>\n\n            <Mobile>\n            {this.state.user.status === 'LOGGED' ?\n                <NavDropdown alignRight title={<User />} className=\"user-button-mobile ml-auto\">\n                  <Link to=\"/oreders\" className=\"dropdown-item\">Zamowienia</Link>\n                  <Link to=\"/cart\" className=\"dropdown-item\">Koszyk</Link>\n                  <Link to=\"/account\" className=\"dropdown-item\">Dane konta</Link>\n                  <NavDropdown.Divider />\n                  <div className=\"dropdown-item\" onClick={this.handleLogout}>Wyloguj</div>\n                </NavDropdown>\n                : <Link to=\"/login\" className=\"login-button-mobile ml-auto\" >{<LogIn />}</Link>}\n              <Navbar.Toggle />\n              <Navbar.Collapse className=\"links\">\n                <Link to=\"/menu\" className=\"nav-link\">Menu</Link>\n                <Link to=\"/about\" className=\"nav-link\">O nas</Link>\n                <Link to=\"/contact\" className=\"nav-link\">Kontakt</Link>\n              </Navbar.Collapse>\n            </Mobile>\n\n            <Desktop>\n              <div className=\"desktop-links\">\n                <Link to=\"/menu\" className=\"nav-link\">Menu</Link>\n                <Link to=\"/about\" className=\"nav-link\">O nas</Link>\n                <Link to=\"/contact\" className=\"nav-link\">Kontakt</Link>\n                </div>\n              {this.state.user.status === 'LOGGED' ?\n                <NavDropdown alignRight title={<User />} className=\"ml-auto\">\n                  <Link to=\"/oreders\" className=\"dropdown-item\">Zamowienia</Link>\n                  <Link to=\"/cart\" className=\"dropdown-item\">Koszyk</Link>\n                  <Link to=\"/account\" className=\"dropdown-item\">Dane konta</Link>\n                  <NavDropdown.Divider />\n                  <div className=\"dropdown-item\" onClick={this.handleLogout}>Wyloguj</div>\n                </NavDropdown>\n                : <Link to=\"/login\">{<LogIn />}</Link>}\n            </Desktop>\n\n          </Navbar>\n          <div className=\"navbar-underline\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(NavigationBar);","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer() {\n  return (\n    <div>\n      <div className=\"footer-overline\" />\n      <div className=\"footer-container\">\n        <div className=\"footer-flexbox\">\n\n\n          <div className=\"footer-copyright\">Copyright &copy; 2020</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport '../../assets/styles/buttons.scss';\nimport './Index.scss';\n\nexport default class Index extends React.Component {\n\n  render() {\n    return (\n      <div className=\"index-wrapper\">\n        <div className=\"content\">\n          <div className=\"p1\">Najlepsza pizza w mie≈õcie.</div>\n          <div className=\"p2\">Na serio, nie k≈Çamiemy.</div>\n          <div className=\"button-wrapper\">\n            <Link to=\"/movies\">\n              <button className=\"btn-primary btn-order\">Zam√≥w teraz</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport ScrollToTop from '../ScrollToTop/ScrollToTop';\nimport Navbar from '../Navbar/Navbar';\nimport Footer from '../Footer/Footer';\nimport Index from '../Index/Index';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Router>\n      <ScrollToTop />\n      <div className=\"App\">\n        <div className=\"bg\">\n          <div className=\"wrapper\">\n            <Navbar />\n            <Route path=\"/\" exact component={Index} />\n          \n          </div>\n        </div>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}